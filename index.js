process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection:', reason);
});

process.on('uncaughtException', (err) => {
  console.error('Uncaught Exception:', err);
});

require('dotenv').config();

const fs = require('fs');
const path = require('path');
const { Bot, Keyboard } = require('grammy');

const bot = new Bot(process.env.BOT_TOKEN);
const ADMIN_ID = Number(process.env.ADMIN_ID);

function getCyclePhase() {
  const startDate = new Date(process.env.CYCLE_START_DATE);
  const cycleLength = Number(process.env.CYCLE_LENGTH || 28);
  const today = new Date();
  const diff = Math.floor((today - startDate) / (1000 * 60 * 60 * 24)) % cycleLength;

  if (diff >= 0 && diff <= 4) return 'menstruation';
  if (diff >= 5 && diff <= 11) return 'follicular';
  if (diff >= 12 && diff <= 14) return 'ovulation';
  if (diff >= 15 && diff <= 24) return 'luteal';
  if (diff >= 25 && diff <= 27) return 'pms';
  return 'unknown';
}

const phaseMessages = {
  menstruation: 'ü©∏ –£ –°–∞—à–∏ –º–µ—Å—è—á–Ω—ã–µ. –°–∞–º–æ–µ –≤—Ä–µ–º—è –∑–∞–±–æ—Ç—ã, —É—é—Ç–∞ –∏ —á–∞—è —Å —á–µ–º-—Ç–æ –≤–∫—É—Å–Ω—ã–º ‚òïüßÅ',
  follicular: 'üå± –§–µ—Ä—Ç–∏–ª—å–Ω–æ–µ –æ–∫–Ω–æ. –£ –°–∞—à–∏ –ø—Ä–∏–ª–∏–≤ —Å–∏–ª –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏ –µ—ë –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!',
  ovulation: 'üí´ –°–µ–≥–æ–¥–Ω—è –æ–≤—É–ª—è—Ü–∏—è! –°–∞—à–∞ –æ—Å–æ–±–µ–Ω–Ω–æ –æ–±–∞—è—Ç–µ–ª—å–Ω–∞ –∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ ‚Äî –±—É–¥—å –æ—Å–æ–±–µ–Ω–Ω–æ –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω ‚ù§Ô∏è',
  luteal: 'üåô –õ—é—Ç–µ–∞–ª—å–Ω–∞—è —Ñ–∞–∑–∞. –í–æ–∑–º–æ–∂–Ω—ã —Ä–µ–∑–∫–∏–µ –ø–µ—Ä–µ–ø–∞–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–∞!',
  pms: '‚ö†Ô∏è –°–∫–æ—Ä–æ –º–µ—Å—è—á–Ω—ã–µ. –ú–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —É—Å—Ç–∞–ª–æ—Å—Ç—å ‚Äî –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω—ã –±–µ—Ä–µ–∂–Ω–æ—Å—Ç—å –∏ –æ–±–Ω–∏–º–∞—à–∫–∏ üß∏'
};

async function sendCycleNotification() {
  const phase = getCyclePhase();
  const message = phaseMessages[phase];
  if (message) {
    await bot.api.sendMessage(ADMIN_ID, `üîî –¶–∏–∫–ª: ${message}`);
    await bot.api.sendMessage(1189007223, `üîî –¶–∏–∫–ª: ${message}`);
  }
}


// === –§–∞–π–ª—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è ===
const memeIndexFile = path.join(__dirname, 'meme_index.json');
const adviceCooldownFile = path.join(__dirname, 'daily_advice.json');
const dreamsFile = path.join(__dirname, 'dreams.json');

let userDreams = fs.existsSync(dreamsFile)
  ? JSON.parse(fs.readFileSync(dreamsFile, 'utf8'))
  : {};

function saveDreams() {
  fs.writeFileSync(dreamsFile, JSON.stringify(userDreams, null, 2));
}


let userMemeIndex = fs.existsSync(memeIndexFile)
  ? JSON.parse(fs.readFileSync(memeIndexFile, 'utf8'))
  : {};

let userAdviceTimestamps = fs.existsSync(adviceCooldownFile)
  ? JSON.parse(fs.readFileSync(adviceCooldownFile, 'utf8'))
  : {};

function saveAdviceTimestamps() {
  fs.writeFileSync(adviceCooldownFile, JSON.stringify(userAdviceTimestamps, null, 2));
}

function saveMemeIndex() {
  fs.writeFileSync(memeIndexFile, JSON.stringify(userMemeIndex, null, 2));
}


// –ú–µ–º—ã
const memePhotos = [
  'AgACAgIAAxkBAAPCaGjbFcVkDdfrkOVyMVzHs1xtDHEAAs7zMRsfj0hLcRah7yXIqmcBAAMCAAN4AAM2BA',
  'AgACAgIAAxkBAAPEaGjbN4perbA3ufmQs7vI3vI5u6wAAs_zMRsfj0hLUFgtq22NrUEBAAMCAAN4AAM2BA',
  'AgACAgIAAxkBAAPGaGjbVR96z4cluSJ-V0njKK0vrZIAAtHzMRsfj0hLl9XXoElGDokBAAMCAAN4AAM2BA',
  'AgACAgIAAxkBAAPKaGjbm9EZi1Zswp-2K6N6VUt-uZgAAtbzMRsfj0hL85IfFAW7GUoBAAMCAAN4AAM2BA',
  'AgACAgIAAxkBAAPMaGjbtQ0hNLzvq_hKWXvU5ISYAtkAAtrzMRsfj0hL9d1QT_O9i7MBAAMCAAN4AAM2BA',
  'AgACAgIAAxkBAAPOaGjb0XhKGijQ10qvtK4mbHQOU3UAAqDyMRu0nElLvzjPng13ZxkBAAMCAAN4AAM2BA'
];

// –ú–µ–Ω—é
const mainKeyboard = new Keyboard()
.text('–ë–µ—Å–ø–ª–∞—Ç–Ω–æüíì').row()
.text('–ü–ª–∞—Ç–Ω–æü´∞')
.text('–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ üîó')
.text('–û—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞ ‚úçÔ∏è')
.resized();

const freeKeyboard = new Keyboard()
  .text('–ü–æ—Ü–µ–ª—É–π S ‚òÅ').row()
  .text('–ü–æ—Ü–µ–ª—É–π L üçì').row()
  .text('–ü–æ—Ü–µ–ª—É–π XXL üòà').row()
  .text('–°—Ä–æ—á–Ω—ã–µ –æ–±–Ω–∏–º–∞—à–∫–∏ üß∏').row()
  .text('–û–±—ä—è—Ç–∏—è XL ‚ù§Ô∏è').row()
  .text('–¢–µ—Å—Ç –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π) ‚ú®').row()
  .text('–ü—Ä–æ–≥–Ω–æ–∑ –∏ —Å–æ–≤–µ—Ç –Ω–∞ –¥–µ–Ω—å ü™Ñ').row()
  .text('–ù–∞–ø–∏—Å–∞—Ç—å –º–µ—á—Ç—É (–ö–Ω–æ–ø–∫–∞ –∑–∞—Ä—è–∂–µ–Ω–∞ —ç–Ω–µ—Ä–≥–∏–µ–π –Ω–∞ –µ—ë –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ) üí´').row()
  .text('üîô –ù–∞–∑–∞–¥')
  .resized();

const paidKeyboard = new Keyboard()
  .text('–ó–∞–≤–∞—Ä–∏—Ç—å —á–∞–π/–∫–æ—Ñ–µ ‚òïü´ñ').row()
  .text('–ë—ã—Å—Ç—Ä—ã–π –≤–∫—É—Å–Ω—ã–π –ø–µ—Ä–µ–∫—É—Å ü•ê').row()
  .text('–ú–∞—Å—Å–∞–∂ üíÜ').row()
  .text('–ú–µ–º—á–∏–∫ üêí').row()
  .text('üîô –ù–∞–∑–∞–¥')
  .resized();

// –ö–æ–º–∞–Ω–¥—ã
bot.command('start', async (ctx) => {
  await ctx.replyWithAnimation('CgACAgIAAxkBAAORaGjGMi2dp6DzsgZN-ccqxMOFA5IAAgV1AAIfj0hLA9gAARgwJwhCNgQ');
  await ctx.reply('–ü—Ä–∏–≤–µ—Ç, –ª—é–±–∏–º–∫–∞! üíì –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å, —á—Ç–æ —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, –∞ —è –ø—Ä–æ—Å—Ç–æ —Å–¥–µ–ª–∞—é —ç—Ç–æ ‚ú® üëâüëà –¢–∞–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º —è —Ö–æ—á—É –≤—ã—Ä–∞–∑–∏—Ç—å —Å–≤–æ—é –ª—é–±–æ–≤—å –∫ —Ç–µ–±–µ üíì –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —É—Å–ª—É–≥–∏ –ø–ª–∞—Ç–Ω—ã–µ üòâ', {
    reply_markup: mainKeyboard
  });
});

bot.hears('–ë–µ—Å–ø–ª–∞—Ç–Ω–æüíì', async (ctx) => ctx.reply('–í—ã–±–∏—Ä–∞–π:', { reply_markup: freeKeyboard }));

bot.hears('–ü–ª–∞—Ç–Ω–æü´∞', async (ctx) => ctx.reply('–í–æ—Ç –ø–ª–∞—Ç–Ω—ã–µ –æ–ø—Ü–∏–∏, –º–∏–ª–∞—à–∫–∞ üòò', { reply_markup: paidKeyboard }));

bot.hears('–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ üîó', async (ctx) => {
  await ctx.reply('–í–æ—Ç —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–±–µ –ø–æ–ª–µ–∑–Ω–æ ü´∂:', {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: 'üå∏ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–∑–∞—Ö –º–æ–µ–≥–æ —Ü–∏–∫–ª–∞',
            url: 'https://docs.google.com/document/d/14hiIuIbMan3o3tgH4n1rNd40ujKu3MLSoXnqwnsUM2w/edit?usp=sharing'
          }
        ]
      ]
    }
  });
});
bot.hears('–û—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞ ‚úçÔ∏è', async (ctx) => {
  const userId = ctx.from.id;
  waitingForFeedback[userId] = true;

  await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞. –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –Ω–∞–ø–∏—à–∏ "–æ—Ç–º–µ–Ω–∞"');
});




const notifyAdmin = async (ctx, choice) => {
  await bot.api.sendMessage(ADMIN_ID, `üîî –ù–æ–≤—ã–π –∑–∞–∫–∞–∑: ${choice} –æ—Ç @${ctx.from.username || ctx.from.first_name}`);
};

// –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –æ–ø—Ü–∏–∏
const freeOptions = [
  '–ü–æ—Ü–µ–ª—É–π S ‚òÅ',
  '–ü–æ—Ü–µ–ª—É–π L üçì',
  '–ü–æ—Ü–µ–ª—É–π XXL üòà',
  '–°—Ä–æ—á–Ω—ã–µ –æ–±–Ω–∏–º–∞—à–∫–∏ üß∏',
  '–û–±—ä—è—Ç–∏—è XL ‚ù§Ô∏è',
  '–¢–µ—Å—Ç –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π) ‚ú®',
  '–ü—Ä–æ–≥–Ω–æ–∑ –∏ —Å–æ–≤–µ—Ç –Ω–∞ –¥–µ–Ω—å ü™Ñ'
];

bot.hears(freeOptions, async (ctx) => {
  const choice = ctx.message.text;
  switch (choice) {
    case '–ü–æ—Ü–µ–ª—É–π S ‚òÅ':
      await ctx.reply('–¢—ã –≤—ã–±—Ä–∞–ª –Ω–µ–∂–Ω—ã–π –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π üíã—á–º–æ–∫üíã –û–∂–∏–¥–∞–π! ‚ú®');
      await notifyAdmin(ctx, choice);
      break;
    case '–ü–æ—Ü–µ–ª—É–π L üçì':
      await ctx.reply('–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Å—è... –°–∞–º—ã–π —Å–æ—á–Ω—ã–π —Å—Ç—Ä–∞—Å—Ç–Ω—ã–π –ø–æ—Ü–µ–ª—É–π –¥–ª—è —Ç–µ–±—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å üíã');
      await notifyAdmin(ctx, choice);
      break;
    case '–ü–æ—Ü–µ–ª—É–π XXL üòà':
      await ctx.replyWithPhoto('AgACAgIAAxkBAAOzaGjN0kS0tzJpqSXRW5_9waCvhfcAAuT3MRuABEhLR1K5SGOpWEkBAAMCAAN4AAM2BA');
      await notifyAdmin(ctx, choice);
      await ctx.reply('–ù—É —á—Ç–æ –∂... üí¶ –î–æ—Å—Ç–∞–≤–∞–π —Å–≤–æ–π –æ–≥—Ä–æ–º–Ω—ã–π üçå');
      break;
    case '–°—Ä–æ—á–Ω—ã–µ –æ–±–Ω–∏–º–∞—à–∫–∏ üß∏':
      await ctx.reply('–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –æ–±—ä—è—Ç–∏–π —É–∂–µ —Å–ø–µ—à–∏—Ç –∫ —Ç–µ–±–µ! üß∏üí´');
      await notifyAdmin(ctx, choice);
      break;
    case '–û–±—ä—è—Ç–∏—è XL ‚ù§Ô∏è':
      await ctx.reply('–ù–µ–∂–Ω—ã–µ, –æ–±–≤–æ–ª–∞–∫–∏–≤–∞—é—â–∏–µ, —Å –∑–∞–ø–∞—Å–æ–º –ª—é–±–≤–∏ ‚ù§Ô∏èü§ó');
      await notifyAdmin(ctx, choice);
      break;
    
          case '–¢–µ—Å—Ç –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π) ‚ú®':
      await ctx.reply('–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?', {
        reply_markup: moodKeyboard
      });
      break;

    case '–ü—Ä–æ–≥–Ω–æ–∑ –∏ —Å–æ–≤–µ—Ç –Ω–∞ –¥–µ–Ω—å ü™Ñ':
      const userId = ctx.from.id.toString();
      const now = Date.now();
      const last = userAdviceTimestamps[userId];

      if (last && now - last < 86400000) {
        const hoursLeft = Math.ceil((86400000 - (now - last)) / (60 * 60 * 1000));
        return ctx.reply(`üåô –¢—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª —Å–æ–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ ${hoursLeft} —á.`);
      }

      const adviceList = [
        '–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å –±—É–¥–µ—Ç –ø–æ–ª–æ–Ω –º–∞–ª–µ–Ω—å–∫–∏—Ö —á—É–¥–µ—Å. –ù–µ —É–ø—É—Å–∫–∞–π —à–∞–Ω—Å —É–ª—ã–±–Ω—É—Ç—å—Å—è –º–∏—Ä—É! ‚ú®',
        '–¢—ã —Å–≤–µ—Ç–∏—à—å—Å—è –∏–∑–Ω—É—Ç—Ä–∏. –ü—É—Å—Ç—å —ç—Ç–æ –±—É–¥–µ—Ç —Ç–≤–æ–∏–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–º –æ—Ä—É–∂–∏–µ–º —Å–µ–≥–æ–¥–Ω—è üí´',
        '–°–æ–ª–Ω—Ü–µ —Å–µ–≥–æ–¥–Ω—è –Ω–µ —Ç–æ–ª—å–∫–æ –≤ –Ω–µ–±–µ, –Ω–æ –∏ –≤ —Ç–µ–±–µ. –ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º —Ç–µ–ø–ª–æ–º ‚Äî –∏ –æ–Ω–æ –≤–µ—Ä–Ω—ë—Ç—Å—è! üåû',
        '–í–æ–∑–º–æ–∂–Ω—ã –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—è—Ç–Ω–æ—Å—Ç–∏. –ë—É–¥—å –æ—Ç–∫—Ä—ã—Ç üåà',
        '–£–¥–∞—á–∞ –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤—É–µ—à—å –º—è–≥–∫–æ, –Ω–æ —É–≤–µ—Ä–µ–Ω–Ω–æ. –ù–µ —Ç–æ—Ä–æ–ø–∏—Å—å ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–¥–∏ –≤–ø–µ—Ä—ë–¥ üçÄ',
        '–°–µ–≥–æ–¥–Ω—è –ª—É—á—à–µ –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–µ–±—è ‚Äî –≤—ã–±–µ—Ä–∏ –∑–∞–±–æ—Ç—É –æ —Å–µ–±–µ. –ú–∏—Ä –ø–æ–¥–æ–∂–¥—ë—Ç. –ù–µ –∑–∞–±—É–¥—å –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –∏ –ø–æ–∫—É—à–∞—Ç—å ü•üü•ó',
        '–í—Å—ë, —á—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å —Å –ª—é–±–æ–≤—å—é, –ø—Ä–∏–Ω–µ—Å—ë—Ç —É–¥–∞—á—É. –°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ —Ö–æ—Ä–æ—à–µ–º –∏ –æ–Ω–æ –ø—Ä–∏—É–º–Ω–æ–∂–∏—Ç—Å—è ü¶ã',
        '–¢–≤–æ—è —É–ª—ã–±–∫–∞ ‚Äî –º–∞–≥–Ω–∏—Ç –¥–ª—è –¥–æ–±—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π. –ù–µ –∑–∞–±—ã–≤–∞–π –≤–∫–ª—é—á–∏—Ç—å –µ—ë —É—Ç—Ä–æ–º üíå',
        '–≠—Ç–æ—Ç –¥–µ–Ω—å –±—É–¥–µ—Ç –∫–∞–∫ –ª—ë–≥–∫–∏–π –≤–µ—Ç–µ—Ä: –Ω–µ–∂–Ω—ã–π –∏ —Å–≤–µ–∂–∏–π ‚òÅ'
      ];
      const dreamsFile = path.join(__dirname, 'dreams.json');
let userDreams = fs.existsSync(dreamsFile)
  ? JSON.parse(fs.readFileSync(dreamsFile, 'utf8'))
  : {};

function saveDreams() {
  fs.writeFileSync(dreamsFile, JSON.stringify(userDreams, null, 2));
}

let waitingForDream = {};

bot.hears('–ù–∞–ø–∏—Å–∞—Ç—å –º–µ—á—Ç—É (–ö–Ω–æ–ø–∫–∞ –∑–∞—Ä—è–∂–µ–Ω–∞ —ç–Ω–µ—Ä–≥–∏–µ–π –Ω–∞ –µ—ë –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ) üí´', async (ctx) => {
  const userId = ctx.from.id;
  waitingForDream[userId] = true;

  await ctx.reply('ü§´ –ù–∞–ø–∏—à–∏ —Å–≤–æ—é –º–µ—á—Ç—É. –û–Ω–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–æ –≤—Å–µ–ª–µ–Ω–Ω—É—é –∏ —Ç–æ—á–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç—Å—è üí´ –≠—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω–æ, –Ω–∏–∫—Ç–æ –Ω–µ —É–∑–Ω–∞–µ—Ç, —á—Ç–æ —Ç—ã –∑–∞–≥–∞–¥–∞–ª üíì –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞ –º–µ—á—Ç—ã –Ω–∞–ø–∏—à–∏ –ø—Ä–æ—Å—Ç–æ "–æ—Ç–º–µ–Ω–∞"');
});

bot.on('message:text', async (ctx) => {
  const userId = ctx.from.id;

  // –†–µ–∂–∏–º –≤–≤–æ–¥–∞ –º–µ—á—Ç—ã
  if (waitingForDream[userId]) {
    const dreamText = ctx.message.text.trim().toLowerCase();

    if (dreamText === '–æ—Ç–º–µ–Ω–∞') {
      delete waitingForDream[userId];
      return await ctx.reply('‚ùå –¢—ã –æ—Ç–º–µ–Ω–∏–ª –≤–≤–æ–¥ –º–µ—á—Ç—ã. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥ üîô', {
        reply_markup: freeKeyboard
      });
    }

    const now = new Date();

    userDreams[userId] = {
      text: ctx.message.text,
      date: now.toISOString()
    };
    saveDreams();

    delete waitingForDream[userId];
    return await ctx.reply('‚ú® –ó–∞–ø—Ä–æ—Å –≤–æ –≤—Å–µ–ª–µ–Ω–Ω—É—é –ø—Ä–∏–Ω—è—Ç. –ù–∞—á–∏–Ω–∞—é—Ç—Å—è —Ä–∞–±–æ—Ç—ã –ø–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—é —Ç–≤–æ–µ–π –º–µ—á—Ç—ã...');
  }
});


      const message = adviceList[Math.floor(Math.random() * adviceList.length)];
      await ctx.reply(message);

      userAdviceTimestamps[userId] = now;
      saveAdviceTimestamps();
      break;

      }
});

const moodKeyboard = new Keyboard()
  .text('–û—Ç–ª–∏—á–Ω–æ').row()
  .text('–£—Å—Ç–∞–ª').row()
  .text('–ü–µ—á–∞–ª—å–Ω–æ').row()
  .text('üîô –ù–∞–∑–∞–¥')
  .resized();

const moodResponses = {
  '–û—Ç–ª–∏—á–Ω–æ': [
    '–û—Å—Ç–∞–Ω–æ–≤–∏—Å—å –Ω–∞ –º–∏–Ω—É—Ç—É –∏ –ø—Ä–æ—Å—Ç–æ –ø–æ—á—É–≤—Å—Ç–≤—É–π: ¬´–ú–Ω–µ —Ö–æ—Ä–æ—à–æ¬ª. –≠—Ç–æ –≤–µ–¥—å —Ç–∞–∫ –≤–∞–∂–Ω–æ! ‚òÄÔ∏è',
    '–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º ‚Äî –≤–µ—Ä–Ω—ë—Ç—Å—è –≤–¥–≤–æ–π–Ω–µ ‚ú®',
    '–ó–∞–∫—Ä–æ–π –≥–ª–∞–∑–∞ –∏ –∑–∞–ø–æ–º–Ω–∏ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç. –û–Ω —Å—Ç–∞–Ω–µ—Ç —Ç–≤–æ–∏–º –ª–∏—á–Ω—ã–º —è–∫–æ—Ä–µ–º —Å—á–∞—Å—Ç—å—è üçÄ',
    '–•–æ—á–µ—à—å –µ—â—ë –±–æ–ª—å—à–µ —Ä–∞–¥–æ—Å—Ç–∏? –ü–æ–¥—É–º–∞–π, –∑–∞ —á—Ç–æ —Ç—ã –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å ü™ê'
  ],
  '–£—Å—Ç–∞–ª': [
    '–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –ª–µ–∂–∏—à—å –≤ —Ç—Ä–∞–≤–µ, –∏ –Ω–∞–¥ —Ç–æ–±–æ–π –ø–ª—ã–≤—É—Ç –æ–±–ª–∞–∫–∞. –ü—Ä–æ—Å—Ç–æ –ø–æ–±—É–¥—å —Ç–∞–º üåø',
    '–°–¥–µ–ª–∞–π —Å–µ–±–µ —Ç—ë–ø–ª—ã–π —á–∞–π (–∏–ª–∏ –∑–∞–∫–∞–∂–∏ –ø—Ä—è–º–æ –∑–¥–µ—Å—å üòâ). –ü–æ—Å—Ç–∞–≤—å –Ω–∞ –ø–∞—É–∑—É. –ú–∏—Ä –ø–æ–¥–æ–∂–¥—ë—Ç. ‚òï',
    '–°–¥–µ–ª–∞–π –≤–¥–æ—Ö –Ω–∞ 4 —Å–µ–∫—É–Ω–¥—ã, –∑–∞–¥–µ—Ä–∂–∏ –Ω–∞ 4 —Å–µ–∫—É–Ω–¥—ã, –∑–∞—Ç–µ–º –≤—ã–¥–æ—Ö–Ω–∏ –∑–∞ 6 —Å–µ–∫—É–Ω–¥. –ü–æ–≤—Ç–æ—Ä–∏ 5 —Ä–∞–∑. –ú–µ–¥–ª–µ–Ω–Ω–æ... —Å–ø–æ–∫–æ–π–Ω–æ... üå¨Ô∏è'
  ],
  '–ü–µ—á–∞–ª—å–Ω–æ': [
    '–¢—ã –Ω–µ –æ–¥–∏–Ω, —è –∑–¥–µ—Å—å, —Å —Ç–æ–±–æ–π. –í—Å–µ–≥–¥–∞ ‚ù§Ô∏è. –ü–æ–ø—ã—Ç–∞–π—Å—è –ø–æ–¥—É–º–∞—Ç—å. —á—Ç–æ —É–∂–µ —Ö–æ—Ä–æ—à–µ–≥–æ —Å —Ç–æ–±–æ–π –ø—Ä–æ–∏–∑–æ—à–ª–æ –∏ —á–µ–≥–æ —Ç—ã –¥–æ—Å—Ç–∏–≥ ‚òÄ. –ò –ø–æ–º–Ω–∏, —Ç—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º —Ç—ã –¥—É–º–∞–µ—à—å. –ò –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ —É–¥–∞—á–ª–∏–≤—ã–π üçÄ‚ú®',
    '–ü–æ–ø—Ä–æ–±—É–π —É–ª—ã–±–Ω—É—Ç—å—Å—è, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –æ—á–µ–Ω—å —Ö–æ—á–µ—Ç—Å—è - —ç—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —ç–º–æ—Ü–∏–∏ ‚òÄ‚ù§Ô∏è',
    '–ü–µ—á–∞–ª—å - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –ü–æ–∑–≤–æ–ª—å —Å–µ–±–µ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –µ—ë, –∞ —è –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ —Ç–µ–±–µ —Å–≤–µ—Ç (–µ—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–æ –º–Ω–æ–π —Å–≤–æ–∏–º–∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º–∏). –¢—ã –Ω–µ –æ–¥–∏–Ω üíìüë©‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®',
    '–°–¥–µ–ª–∞–π –≤–¥–æ—Ö –Ω–∞ 4 —Å–µ–∫—É–Ω–¥—ã, –∑–∞–¥–µ—Ä–∂–∏ –Ω–∞ 4 —Å–µ–∫—É–Ω–¥—ã, –∑–∞—Ç–µ–º –≤—ã–¥–æ—Ö–Ω–∏ –∑–∞ 6 —Å–µ–∫—É–Ω–¥. –ü–æ–≤—Ç–æ—Ä–∏ 5 —Ä–∞–∑. –ú–µ–¥–ª–µ–Ω–Ω–æ... —Å–ø–æ–∫–æ–π–Ω–æ... üå¨Ô∏è'
  ]
};

bot.hears('–¢–µ—Å—Ç –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π) ‚ú®', async (ctx) => {
  await ctx.reply('–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?', {
    reply_markup: moodKeyboard
  });
});

bot.hears(['–û—Ç–ª–∏—á–Ω–æ', '–£—Å—Ç–∞–ª', '–ü–µ—á–∞–ª—å–Ω–æ'], async (ctx) => {
  const mood = ctx.message.text;
  const responses = moodResponses[mood];
  const random = responses[Math.floor(Math.random() * responses.length)];

  await ctx.reply(random, {
    reply_markup: new Keyboard().text('üîô –ù–∞–∑–∞–¥').resized()
  });
});

bot.hears('–ü—Ä–æ–≥–Ω–æ–∑ –∏ —Å–æ–≤–µ—Ç –Ω–∞ –¥–µ–Ω—å ü™Ñ', async (ctx) => {
  const userId = ctx.from.id.toString();
  const now = Date.now();
  const last = userAdviceTimestamps[userId];

  if (last && now - last < 86400000) {
    const hoursLeft = Math.ceil((86400000 - (now - last)) / (60 * 60 * 1000));
    return ctx.reply(`üåô –¢—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª —Å–æ–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ ${hoursLeft} —á.`);
  }

  const adviceList = [
    '–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å –±—É–¥–µ—Ç –ø–æ–ª–æ–Ω –º–∞–ª–µ–Ω—å–∫–∏—Ö —á—É–¥–µ—Å. –ù–µ —É–ø—É—Å–∫–∞–π —à–∞–Ω—Å —É–ª—ã–±–Ω—É—Ç—å—Å—è –º–∏—Ä—É! ‚ú®',
    '–¢—ã —Å–≤–µ—Ç–∏—à—å—Å—è –∏–∑–Ω—É—Ç—Ä–∏. –ü—É—Å—Ç—å —ç—Ç–æ –±—É–¥–µ—Ç —Ç–≤–æ–∏–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–º –æ—Ä—É–∂–∏–µ–º —Å–µ–≥–æ–¥–Ω—è üí´',
    '–°–æ–ª–Ω—Ü–µ —Å–µ–≥–æ–¥–Ω—è –Ω–µ —Ç–æ–ª—å–∫–æ –≤ –Ω–µ–±–µ, –Ω–æ –∏ –≤ —Ç–µ–±–µ. –ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º —Ç–µ–ø–ª–æ–º ‚Äî –∏ –æ–Ω–æ –≤–µ—Ä–Ω—ë—Ç—Å—è! üåû',
    '–í–æ–∑–º–æ–∂–Ω—ã –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—è—Ç–Ω–æ—Å—Ç–∏. –ë—É–¥—å –æ—Ç–∫—Ä—ã—Ç üåà',
    '–£–¥–∞—á–∞ –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤—É–µ—à—å –º—è–≥–∫–æ, –Ω–æ —É–≤–µ—Ä–µ–Ω–Ω–æ. –ù–µ —Ç–æ—Ä–æ–ø–∏—Å—å ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–¥–∏ –≤–ø–µ—Ä—ë–¥ üçÄ',
    '–°–µ–≥–æ–¥–Ω—è –ª—É—á—à–µ –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–µ–±—è ‚Äî –≤—ã–±–µ—Ä–∏ –∑–∞–±–æ—Ç—É –æ —Å–µ–±–µ. –ú–∏—Ä –ø–æ–¥–æ–∂–¥—ë—Ç. –ù–µ –∑–∞–±—É–¥—å –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –∏ –ø–æ–∫—É—à–∞—Ç—å ü•üü•ó',
    '–í—Å—ë, —á—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å —Å –ª—é–±–æ–≤—å—é, –ø—Ä–∏–Ω–µ—Å—ë—Ç —É–¥–∞—á—É. –°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ —Ö–æ—Ä–æ—à–µ–º –∏ –æ–Ω–æ –ø—Ä–∏—É–º–Ω–æ–∂–∏—Ç—Å—è ü¶ã',
    '–¢–≤–æ—è —É–ª—ã–±–∫–∞ ‚Äî –º–∞–≥–Ω–∏—Ç –¥–ª—è –¥–æ–±—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π. –ù–µ –∑–∞–±—ã–≤–∞–π –≤–∫–ª—é—á–∏—Ç—å –µ—ë —É—Ç—Ä–æ–º üíå',
    '–≠—Ç–æ—Ç –¥–µ–Ω—å –±—É–¥–µ—Ç –∫–∞–∫ –ª—ë–≥–∫–∏–π –≤–µ—Ç–µ—Ä: –Ω–µ–∂–Ω—ã–π –∏ —Å–≤–µ–∂–∏–π ‚òÅ'
  ];

  const message = adviceList[Math.floor(Math.random() * adviceList.length)];
  await ctx.reply(message);

  userAdviceTimestamps[userId] = now;
  saveAdviceTimestamps();
});

// –ü–ª–∞—Ç–Ω—ã–µ
bot.hears('–ó–∞–≤–∞—Ä–∏—Ç—å —á–∞–π/–∫–æ—Ñ–µ ‚òïü´ñ', async (ctx) => {
  await ctx.replyWithPhoto('AgACAgIAAxkBAAO-aGjRaZA5IBMNjLKdwPwwm7mkx14AApLzMRsfj0hL5u0B22DBZf0BAAMCAAN4AAM2BA');
  await ctx.reply('–° —Ç–µ–±—è 3 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∞ üíãüíãüíã –ß–∞–π –∏–ª–∏ –∫–æ—Ñ–µ?', {
    reply_markup: new Keyboard().text('–ß–∞–π üçµ').text('–ö–æ—Ñ–µ ‚òï').resized()
  });
  await notifyAdmin(ctx, '–ó–∞–≤–∞—Ä–∏—Ç—å —á–∞–π/–∫–æ—Ñ–µ ‚òïü´ñ');
});

bot.hears('–ë—ã—Å—Ç—Ä—ã–π –≤–∫—É—Å–Ω—ã–π –ø–µ—Ä–µ–∫—É—Å ü•ê', async (ctx) => {
  await ctx.replyWithPhoto('AgACAgIAAxkBAAPAaGjSNVbTEQABMkxakC447CTtEtA1AAII8TEbSUdIS_LpQaRT8nNjAQADAgADeAADNgQ');
  await ctx.reply('–≠—Ç–æ —Ç–µ–±–µ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å 5 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–æ–≤ üíãüíãüíãüíãüíã –í–∫—É—Å–Ω—è—à–∫–∞ –Ω–∞ –º–æ—ë —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ + –º–æ–∂–µ—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∏–º–µ—é—â–∏—Ö—Å—è –¥–æ–º–∞ –≤ –Ω–∞–ª–∏—á–∏–∏ ü•™üç≥');
  await notifyAdmin(ctx, '–ë—ã—Å—Ç—Ä—ã–π –≤–∫—É—Å–Ω—ã–π –ø–µ—Ä–µ–∫—É—Å ü•ê');
});

bot.hears('–ú–∞—Å—Å–∞–∂ üíÜ', async (ctx) => {
  await ctx.reply('–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ - 5 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–æ–≤ üíãüíãüíãüíãüíã –£—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è –ø–æ—É–¥–æ–±–Ω–µ–µ... –ù–∞—á–∏–Ω–∞—é –º—è–≥–∫–∏–π —Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π –º–∞—Å—Å–∞–∂ –ø–ª–µ—á –∏ —à–µ–∏ üå∏üíÜ‚Äç‚ôÄÔ∏è‚ú® –¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞!');
  
  await notifyAdmin(ctx, '–ú–∞—Å—Å–∞–∂ üíÜ');
});

bot.hears('–ú–µ–º—á–∏–∫ üêí', async (ctx) => {
  const userId = ctx.from.id.toString();
  const index = userMemeIndex[userId] || 0;

  await ctx.replyWithPhoto(memePhotos[index]);
  await ctx.reply('–° —Ç–µ–±—è –æ–ø–ª–∞—Ç–∞ –≤ –≤–∏–¥–µ —É–ª—ã–±–∫–∏ üòä –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –µ—â—ë ‚Äî –∂–º–∏ –µ—â—ë —Ä–∞–∑!');

  userMemeIndex[userId] = (index + 1) % memePhotos.length;
  saveMemeIndex();
});

bot.hears(['–ß–∞–π üçµ', '–ö–æ—Ñ–µ ‚òï'], async (ctx) => {
  const choice = ctx.message.text;
  await ctx.reply('–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! ‚ù§Ô∏è', {
    reply_markup: new Keyboard().text('üîô –ù–∞–∑–∞–¥').resized()
  });
await notifyAdmin(ctx, `–í—ã–±—Ä–∞–Ω –Ω–∞–ø–∏—Ç–æ–∫: ${choice}`);
});

bot.hears('üîô –ù–∞–∑–∞–¥', async (ctx) => {
  await ctx.reply('–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üíì –í—ã–±–∏—Ä–∞–π —Å–Ω–æ–≤–∞:', {
    reply_markup: mainKeyboard
  });
});
bot.command('pingme', async (ctx) => {
  try {
    await bot.api.sendMessage(ADMIN_ID, 'üîî –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–µ–±–µ –≤ –ª–∏—á–∫—É!');
    await ctx.reply('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ—é –ª–∏—á–∫—É!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –õ–°:', error);
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–∫—É.');
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ file_id
bot.on('message:animation', async (ctx) => {
  const fileId = ctx.message.animation.file_id;
  await ctx.reply(`file_id —ç—Ç–æ–π –≥–∏—Ñ–∫–∏: ${fileId}`);
});

bot.on('message:photo', async (ctx) => {
  const fileId = ctx.message.photo.at(-1).file_id;
  await ctx.reply(`file_id —ç—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏: ${fileId}`);
});

// === –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è ===

let waitingForPost = false;
let waitingForFeedback = {};

// –í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
bot.command('post', async (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return;

  waitingForPost = true;
  await ctx.reply('üìù –í–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å. –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏ "–æ—Ç–º–µ–Ω–∞".');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
bot.on('message:text', async (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return;

// –ü–æ–∂–µ–ª–∞–Ω–∏—è
if (waitingForFeedback[ctx.from.id]) {
  const text = ctx.message.text.trim();

  if (text.toLowerCase() === '–æ—Ç–º–µ–Ω–∞') {
    delete waitingForFeedback[ctx.from.id];
    return await ctx.reply('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ. –¢—ã –≤—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–æ–∂–µ–ª–∞–Ω–∏–π.');
  }

  await bot.api.sendMessage(ADMIN_ID, `üí° –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –æ—Ç @${ctx.from.username || ctx.from.first_name}:\n\n${text}`);
  await ctx.reply('‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ—ë –º–Ω–µ–Ω–∏–µ! –Ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–º —ç—Ç–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏—Ü–µ üíì');

  delete waitingForFeedback[ctx.from.id];
  return;
}
  if (!waitingForPost) return;

  const text = ctx.message.text.trim();

  if (text.toLowerCase() === '–æ—Ç–º–µ–Ω–∞') {
    waitingForPost = false;
    return await ctx.reply('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ. –¢—ã –≤—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.');
  }

  try {
    await ctx.reply('‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ—Å—Ç...');
    // –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø–µ)
    await bot.api.sendMessage(1189007223, text);
    waitingForPost = false;
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞:', err);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞.');
  }
});

const cron = require('node-cron');

// –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 —É—Ç—Ä–∞
cron.schedule('0 8 * * *', () => {
  sendCycleNotification();
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—á—Ç, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ –ø–æ–ª–≥–æ–¥–∞
cron.schedule('0 8 * * *', async () => {
  const now = new Date();

  for (const [userId, data] of Object.entries(userDreams)) {
    const startDate = new Date(data.startDate);
    const halfYearLater = new Date(startDate);
    halfYearLater.setMonth(halfYearLater.getMonth() + 6);

    if (
      now.getFullYear() === halfYearLater.getFullYear() &&
      now.getMonth() === halfYearLater.getMonth() &&
      now.getDate() === halfYearLater.getDate()
    ) {
      const dreamsList = data.dreams.map((d, i) => `${i + 1}. ${d}`).join('\n');
      try {
        await bot.api.sendMessage(userId, `–ü—Ä–∏–≤–µ—Ç! üíì‚ú® –í–æ—Ç –æ —á–µ–º —Ç—ã –º–µ—á—Ç–∞–ª –∑–∞ —ç—Ç–∏ –ø–æ–ª–≥–æ–¥–∞ ü§´:\n\n${dreamsList}`);
       delete userDreams[userId]; // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        saveDreams(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º
      } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ—á—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, err);
      }
    }
  }
});



// –ó–∞–ø—É—Å–∫
bot.start();
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ');
